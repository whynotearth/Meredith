# https://docs.microsoft.com/azure/devops/pipelines/yaml-schema

pr: none
trigger:
  batch: true
  branches:
    include:
      - master
      - staging

variables:
 - ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
   - group: 'ProductionSecrets'
 - ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
   - group: 'StagingSecrets'
 - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
   value: true
 - name: Enviroment
   ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
     value: 'Production'
   ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
     value: 'Staging'

jobs:
  - job: 'BuildJob'
    displayName: 'Build'
    pool:
      vmImage: 'windows-latest'
    workspace:
      clean: all

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore dotnet tools'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'restore'

    - task: DotNetCoreCLI@2
      displayName: 'Format'
      inputs:
        command: 'custom'
        custom: 'format'
        arguments: '--check --verbosity diagnostic'

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: restore
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: test
        projects: '*Tests/*.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Check Swagger'
      inputs:
        command: 'custom'
        custom: 'swagger'
        arguments: 'tofile --output WhyNotEarth.Meredith.App/bin/Debug/netcoreapp3.1/swagger.json WhyNotEarth.Meredith.App/bin/Release/netcoreapp3.1/WhyNotEarth.Meredith.App.dll v0'

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration Release --output published-app /p:EnvironmentName=$(Enviroment) --runtime win-x64 --self-contained true'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'published-app'
        artifactName: 'publishedApp'

  - deployment:
    displayName: 'Deploy'
    dependsOn: 'BuildJob'
    pool:
      vmImage: 'windows-latest'
    environment:
      name: 'GCE VM'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'publishedApp'

          - task: IISWebAppManagementOnMachineGroup@0
            displayName: 'IIS Web App Manage'
            inputs:
              ActionIISWebsite: 'CreateOrUpdateWebsite'
              WebsiteName: '$(website.name)'
              websitePhysicalPath: '%SystemDrive%\inetpub\wwwroot\$(website.name)'

          - task: IISWebAppDeploymentOnMachineGroup@0
            displayName: 'IIS Web App Deploy'
            inputs:
              WebSiteName: '$(website.name)'
              Package: '$(Pipeline.Workspace)/PublishedApp/**/*.*'
              RemoveAdditionalFilesFlag: true
              TakeAppOfflineFlag: true
              jSONFiles: 'appsettings.json'

          - powershell: |
              [System.Collections.ArrayList]$embedArray = @()

              $commitMessage = @'
              $(Build.SourceVersionMessage)
              '@

              $embedObject = [PSCustomObject]@{
                  title = $commitMessage
                  url = 'https://github.com/whynotearth/meredith-core/commit/$(Build.SourceVersion)'
              }

              $embedArray.Add($embedObject) | Out-Null

              $payload = [PSCustomObject]@{
                  content = 'Deployed Meredith to $(Enviroment)'
                  embeds = $embedArray
              }

              Invoke-RestMethod -Uri 'https://discord.com/api/webhooks/$(discord.webhook)' -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType 'application/json'
            displayName: 'Discord message'